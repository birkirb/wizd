●コレは何？

libnkf の nkf() とほぼ同じインターフェースを持つ nkf のラッパーです。


●じゃあ libnkf と何が違うの？

大きな違いは、
 1. libnkf の nkf() は 成功時に0を返すが、
    この nkf() は 実際に書いた文字数を返す。
 2. nkf_continue() という、前回の nkf() の (漢字コード自動判別結果などの)
    内部状態を保持して変換を行う関数がある。
 3. nkf 自体を比較的簡単に取り替えることができる。
    (nkf.c と utf8tbl.c を入れ替えるだけ。)


●なんでわざわざ作ったの？

wizdを作ってるときに、最新のnkfの成果が欲しくなったのです。
でも libnkf は ベースとした nkf のコアの部分に手が入っていて
最新のnkfに簡単には追従できなかったんですよ orz
そしたら本家のnkfに、PERL用のモジュールがあるじゃないですか。
そして気づいたらいつのまにかできてました。


●Nkf Wrapper 0.1 じゃダメ？

C++もつかえるし、それもアリです。
ていうか、気づいたの 初版 作り終わってからだし orz

あ、でも、ウリがひとつふたつ。(そのうち Nkf Wrapper側も対応するでしょうけど)

1. long option を複数渡してもちゃんと解析できます。
  例) "e --url-input --cap-input"
  long option のときは options() に渡した文字列を nkf側が書き換えてしまうので
  解析が途中で止まっちゃうんですよね。
  nkf側が修正されるかもしれませんけど、古いnkfだとこの動作なので一応。

2. nkf_continue() が使えます。

3. nkf 1.92を使いたい場合も、コード編集はナシでいけます。

# あれ？もひとつのウリだと思ったけど、よく見たら...
#     if(x0201_f == WISH_TRUE)
#         x0201_f = ((!iso2022jp_f)? TRUE : NO_X0201);
# この部分、WISH_TRUE って値が実は使われてないから省いてる？> Nkf Wrapper


●ライセンスは？

nkfwrap のライセンス/配布条件等は 全て nkf の条件に従います。


●別のバージョンの nkf を使いたいんだけど

nkf/ 以下に使いたい nkf のコードを置いてください。それだけです。
nkf/nkf.c があるようになっていればOKです。
動作確認は、nkf 1.92, nkf 2.01, nkf 2.04, nkf 2.04(2004-12-24版)で確認しました。
nkf 2以降は nkf/utf8tbl.c と nkf/config.h も置いてくださいね。

それと、隠しコマンド make update とすると、cvs コマンドを使って
sourceforge.jp にアクセスし、最新のソースを取ってこようとします（鬼
とっても楽チンですが、環境によっては使えませんし、なにより迷惑かもしれないので ほどほどに。
# もし sourceforge やら cvs やらが使えなくなってるときは気にしないでください。
